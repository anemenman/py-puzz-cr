"""
Генератор - это особый вид итератора - объекта, который отдает значения по одному за раз. Любая функция содержащая
yield является генераторной функцией. При вызове генераторная функция возвращает генератор-итератор или просто генератор.
Генераторная функция и генератор - это разные объекты, хотя и связанные друг с другом.
"""
from inspect import isgeneratorfunction, isgenerator


def gen_function(n):
    while n > 0:
        yield n
        n -= 1


# генераторная функция возвращает генератор
gen = gen_function(5)

print('type gen_function is', type(gen_function))
print('type gen is', type(gen))

print('gen_function is generatorfunction: ', isgeneratorfunction(gen_function))
print('gen_function is generator: ', isgenerator(gen_function))

print('gen is generatorfunction: ', isgeneratorfunction(gen))
print('gen is generator: ', isgenerator(gen))

"""
Так же как и итератор, генератор не хранит все значения, а вычисляет их "на лету". Генератор можно обойти только один 
раз. Когда мы запрашиваем значение из генератора выполняется тело генератора до ключевого слова yield. Встретив yield 
генератор возвращает значение, стоящее справа от yield в вызвавший его код и запоминает свою позицию. Если значение 
справа от yield отсутствует, то генератор возвращает None. Когда мы в следующий раз запросим значение из генератора, 
то выполнение продолжится с сохраненной позиции до следующего yield и так же вернется значение справа от yield. 
Получить значение из генератора можно в цикле или используя функции next и send.
"""

"""
Генератор является итератором. Итератор, в свою очередь, это объект, по которому можно итерироваться. Следовательно и по 
генератору тоже можно итерироваться. Так продолжается до тех пор, пока генератор не опустеет или не встретит ключевое слово return.
Рассмотрим пример итерации в цикле for. 
"""
for v in gen:
    print(v)

"""
"Под капотом" цикл for вызывает у генератора метод __iter__, который возвращает итератор и на каждой итерации цикла 
вызывается метод __next__ у полученного итератора.

Получение значений через вызов next
Получить значение из генератора можно вызвав функцию next и передав в нее генератор. Функция next вызывает метод __next__ 
у переданного в нее объекта. 

Помимо yield генератор может содержать и return. Встретив return генератор выбрасывает исключение StopIteration
"""
for i in range(10):
    try:
        print(next(gen))  # StopIteration
    except StopIteration as e:
        print(e.value)

"""
У генератора есть метод close при вызове которого выбрасывается исключение GeneratorExit и генератор завершает свою работу. 
Если после вызова close мы попытаемся получить значение из генератора, то будет выброшено исключение StopIteration.
"""

# gen.close()
