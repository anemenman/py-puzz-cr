"""
Генератор — это особый вид итератора — объект, который выдает значения по одному за раз. Любая функция, содержащая yield,
является функцией-генератором. При вызове функция-генератор возвращает генератор-итератор или просто генератор.
Функция-генератор и генератор — это разные объекты, хотя они и связаны.
"""
from inspect import isgeneratorfunction, isgenerator


def gen_function(n):
    while n > 0:
        yield n
        n -= 1


gen = gen_function(3)

print('type gen_function is', type(gen_function))
print('type gen is', type(gen))

print('gen_function is generatorfunction: ', isgeneratorfunction(gen_function))
print('gen_function is generator: ', isgenerator(gen_function))

print('gen is generatorfunction: ', isgeneratorfunction(gen))
print('gen is generator: ', isgenerator(gen))

"""
Как и итератор, генератор не хранит все значения, а вычисляет их «на лету». Генератор можно обойти только один раз. 
Когда мы запрашиваем значение у генератора, тело генератора выполняется до ключевого слова yield. Когда он встречает yield , 
генератор возвращает значение справа от yield коду, который его вызвал, и запоминает его позицию. Если справа от yield 
нет значения, генератор возвращает None. В следующий раз, когда мы запросим значение у генератора,
то выполнение продолжится с сохраненной позиции до следующего yield, и значение справа от yield также будет возвращено.
Вы можете получить значение из генератора в цикле или с помощью функций next и send.
"""

"""
Генератор — это итератор. Итератор, в свою очередь, — это объект, который можно перебирать. Следовательно, генератор тоже 
можно перебирать. Это продолжается до тех пор, пока генератор не станет пустым или не встретит ключевое слово return.
"""
for i in gen:
    print(i)

"""
Под капотом цикл for вызывает метод генератора __iter__, который возвращает итератор, и на каждой итерации цикла 
вызывается метод __next__ для полученного итератора.

Получение значений путем вызова next
Вы можете получить значение из генератора, вызвав функцию next и передав ей генератор. Функция next вызывает метод 
__next__ для переданного ей объекта.

Помимо yield, генератор также может содержать return. Когда он сталкивается с return, 
генератор выдает исключение StopIteration
"""
for i in range(10):
    try:
        print(next(gen))  # StopIteration
    except StopIteration as e:
        print(e.value)

"""
У генератора есть метод close, при вызове которого выдается исключение GeneratorExit и генератор завершает свою работу.
Если после вызова close мы попытаемся получить значение из генератора, будет выдано исключение StopIteration.
"""

# gen.close()
